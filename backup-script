#!/usr/bin/env bash

#  Copyright 2019 Stanislav Senotrusov <stan@senotrusov.com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

set -o nounset

determine-root-user-and-group() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    ROOT_USER_AND_GROUP="root:root"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    ROOT_USER_AND_GROUP="root:wheel"
  fi
}

determine-tee-append-option() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    TEE_APPEND_OPTION="--append"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    TEE_APPEND_OPTION="-a"
  fi
}

determine-script-path() {
  local RELATIVE_DIR_PATH

  RELATIVE_DIR_PATH="$(dirname "${BASH_SOURCE[0]}")" || { echo "Unable to get RELATIVE_DIR_PATH (${?})" >&2; exit 1; }

  SCRIPT_ABSOLUTE_DIR_PATH="$(cd "${RELATIVE_DIR_PATH}" >/dev/null 2>&1 && pwd)" || { echo "Unable to get SCRIPT_ABSOLUTE_DIR_PATH (${?})" >&2; exit 1; }
  SCRIPT_FILENAME="$(basename "${BASH_SOURCE[0]}")" || { echo "Unable to get SCRIPT_FILENAME (${?})" >&2; exit 1; }

  export SCRIPT_ABSOLUTE_DIR_PATH
  export SCRIPT_FILENAME
}

determine-config-path() {
  local CONFIG_RELATIVE_DIR_PATH

  CONFIG_RELATIVE_DIR_PATH="$(dirname "${1}")" || { echo "Unable to get CONFIG_RELATIVE_DIR_PATH (${?})" >&2; exit 1; }

  CONFIG_ABSOLUTE_DIR_PATH="$(cd "${CONFIG_RELATIVE_DIR_PATH}" >/dev/null 2>&1 && pwd)" || { echo "Unable to get CONFIG_ABSOLUTE_DIR_PATH (${?})" >&2; exit 1; }
  CONFIG_FILENAME="$(basename "${1}")" || { echo "Unable to get CONFIG_FILENAME (${?})" >&2; exit 1; }

  export CONFIG_ABSOLUTE_DIR_PATH
  export CONFIG_FILENAME
}

prepare-borg-env() {
  if [ -z "${BORG_REPO:-}" ]; then
    if [ ! -z "${REPO_PATH:-}" ]; then
      BORG_REPO="${REPO_PATH}/${REPO_NAME}"
    else
      if [ ! -z "${REPO_VOLUME:-}" ]; then
        BORG_REPO="${REPO_VOLUME}/${REPO_NAME}"
      else
        echo "BORG_REPO, REPO_VOLUME, or REPO_PATH must be specified" >&2
        exit 1
      fi
    fi
  fi

  if [ -z "${BORG_PASSPHRASE:-}" ] && [ -z "${BORG_PASSCOMMAND:-}" ] && [ -z "${BORG_PASSPHRASE_FD:-}" ]; then
    if [ -z "${PASSPHRASE_FILE:-}" ]; then
      echo "BORG_PASSPHRASE, BORG_PASSCOMMAND, BORG_PASSPHRASE_FD, or PASSPHRASE_FILE must be specified" >&2
      exit 1
    fi
    if [ ! -f "${PASSPHRASE_FILE}" ]; then
      echo "Unable to find passphrase file ${PASSPHRASE_FILE}" >&2
      exit 1
    fi
    BORG_PASSPHRASE="$(cat "${PASSPHRASE_FILE}")" || { echo "Unable to load passphrase from ${PASSPHRASE_FILE}" >&2; exit 1; }
  fi

  if [ -z "${BORG_REPO_HASH:-}" ]; then
    BORG_REPO_HASH="$(echo "${BORG_REPO}" | openssl sha256 -r | cut -f 1 -d " "; test "${PIPESTATUS[*]}" = "0 0 0")" || { echo "Unable to make hash of borg repo name" >&2; exit 1; }
  fi

  export BORG_REPO
  export BORG_PASSPHRASE
  export BORG_PASSCOMMAND
  export BORG_PASSPHRASE_FD
  export BORG_REPO_HASH
  export BORG_BASE_DIR
}

prepare-systemd-env() {
  if [ -z "${SYSTEMD_NAME:-}" ]; then
    if [ ! -z "${CONFIG_FILENAME:-}" ]; then
      SYSTEMD_NAME="${CONFIG_FILENAME}"
    else
      echo "SYSTEMD_NAME or CONFIG_FILENAME must be specified" >&2
      exit 1
    fi
  fi
}

prepare-launchd-env() {
  if [ -z "${LAUNCHD_LABEL:-}" ]; then
    if [ ! -z "${CONFIG_FILENAME:-}" ]; then
      LAUNCHD_LABEL="${CONFIG_FILENAME}"
    else
      echo "LAUNCHD_LABEL or REPO_NAME must be specified" >&2
      exit 1
    fi
  fi
}

ensure-repo-volume-connected() {
  if [ ! -z "${REPO_VOLUME:-}" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      if [ ! -d "${REPO_VOLUME}" ]; then
        echo "Please connect volume ${REPO_VOLUME}" >&2
        exit 1
      fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
      if [[ ! $(findmnt -M "${REPO_VOLUME}") ]]; then
        echo "Please connect volume ${REPO_VOLUME}" >&2
        exit 1
      fi
    fi
  fi
}

prepare-install-env() {
  determine-script-path

  if [ -z "${CONFIG_ABSOLUTE_DIR_PATH:-}" ] && [ -z "${CONFIG_FILENAME:-}" ]; then
    determine-config-path "${1}"
  fi

  if [ "${BACKUP_SCRIPT_CONFIG_LOADED:-}" != true ]; then
    . "${CONFIG_ABSOLUTE_DIR_PATH}/${CONFIG_FILENAME}"
    BACKUP_SCRIPT_CONFIG_LOADED=true
  fi

  if [ ! -d "/usr/local/bin" ]; then
    echo "/usr/local/bin directory must exist" >&2
    exit 1
  fi

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    prepare-systemd-env
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    prepare-launchd-env
  fi
}

install() {
  if [ -z "${1:-}" ] && [ -z "${CONFIG_ABSOLUTE_DIR_PATH:-}" ] && [ -z "${CONFIG_FILENAME:-}" ]; then
    determine-script-path

    if [ "${SCRIPT_ABSOLUTE_DIR_PATH}" = "/usr/local/bin" ]; then
      echo "Unable to install self from /usr/local/bin" >&2
      exit 1
    fi

    echo "Installing to /usr/local/bin/${SCRIPT_FILENAME}"

    sudo cp "${SCRIPT_ABSOLUTE_DIR_PATH}/${SCRIPT_FILENAME}" "/usr/local/bin/${SCRIPT_FILENAME}" || { echo "Unable to install script (${?})" >&2; exit 1; }
    sudo chmod 0755 "/usr/local/bin/${SCRIPT_FILENAME}" || { echo "Unable to install script (${?})" >&2; exit 1; }

    determine-root-user-and-group
    sudo chown "${ROOT_USER_AND_GROUP}" "/usr/local/bin/${SCRIPT_FILENAME}" || { echo "Unable to install script (${?})" >&2; exit 1; }

    install-dependencies
  else
    prepare-install-env "$@"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      pause-systemd
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      pause-launchd
    fi

    if [ -z "${CONFIG_ABSOLUTE_DIR_PATH:-}" ]; then
      echo "Unable to install script, CONFIG_ABSOLUTE_DIR_PATH not found (${?})" >&2
      exit 1
    fi

    echo "Installing to /usr/local/bin/${CONFIG_FILENAME}"

    sudo cp "${CONFIG_ABSOLUTE_DIR_PATH}/${CONFIG_FILENAME}" "/usr/local/bin/${CONFIG_FILENAME}.tmp" || { echo "Unable to install script (${?})" >&2; exit 1; }

    determine-tee-append-option

    echo "BACKUP_SCRIPT_CONFIG_LOADED=true" | sudo tee "${TEE_APPEND_OPTION}" "/usr/local/bin/${CONFIG_FILENAME}.tmp" >/dev/null
    test "${PIPESTATUS[*]}" = "0 0" || { echo "Unable to install script (${?})" >&2; exit 1; }

    echo "CONFIG_FILENAME=$(printf "%q" "${CONFIG_FILENAME}")" | sudo tee "${TEE_APPEND_OPTION}" "/usr/local/bin/${CONFIG_FILENAME}.tmp" >/dev/null
    test "${PIPESTATUS[*]}" = "0 0" || { echo "Unable to install script (${?})" >&2; exit 1; }

    cat "${SCRIPT_ABSOLUTE_DIR_PATH}/${SCRIPT_FILENAME}" | sudo tee "${TEE_APPEND_OPTION}" "/usr/local/bin/${CONFIG_FILENAME}.tmp" >/dev/null
    test "${PIPESTATUS[*]}" = "0 0" || { echo "Unable to install script (${?})" >&2; exit 1; }

    sudo chmod 0755 "/usr/local/bin/${CONFIG_FILENAME}.tmp" || { echo "Unable to install script (${?})" >&2; exit 1; }

    determine-root-user-and-group
    sudo chown "${ROOT_USER_AND_GROUP}" "/usr/local/bin/${CONFIG_FILENAME}.tmp" || { echo "Unable to install script (${?})" >&2; exit 1; }

    sudo mv "/usr/local/bin/${CONFIG_FILENAME}.tmp" "/usr/local/bin/${CONFIG_FILENAME}" || { echo "Unable to install script (${?})" >&2; exit 1; }

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      install-systemd
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      install-launchd
    fi
  fi
}

uninstall() {
  if [ -z "${1:-}" ] && [ -z "${CONFIG_ABSOLUTE_DIR_PATH:-}" ] && [ -z "${CONFIG_FILENAME:-}" ]; then
    determine-script-path

    echo "Uninstalling from /usr/local/bin/${SCRIPT_FILENAME}"

    sudo rm "/usr/local/bin/${SCRIPT_FILENAME}" || { echo "Unable to remove script (${?})" >&2; exit 1; }
  else
    prepare-install-env "$@"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      uninstall-systemd
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      uninstall-launchd
    fi

    echo "Uninstalling from /usr/local/bin/${CONFIG_FILENAME}"

    sudo rm "/usr/local/bin/${CONFIG_FILENAME}" || { echo "Unable to remove script (${?})" >&2; exit 1; }
  fi
}

install-dependencies() {
  if ! command -v rclone >/dev/null;  then
    if command -v brew >/dev/null; then
      echo "Press ENTER to install rclone using homebrew"
      read
      brew install rclone || { echo "Unable to install rclone" >&2; exit 1; }
    else
      echo "Press ENTER to install rclone using curl | sudo bash"
      read
      curl --fail --silent --show-error https://rclone.org/install.sh | sudo bash
      test "${PIPESTATUS[*]}" = "0 0" || { echo "Unable to install rclone" >&2; exit 1; }
    fi
  fi

  if ! command -v borg >/dev/null;  then
    if command -v brew >/dev/null; then
      echo "Press ENTER to install borgbackup using homebrew (brew cask install)"
      read
      brew cask install borgbackup || { echo "Unable to install borg" >&2; exit 1; }
    elif command -v apt >/dev/null; then
      echo "Press ENTER to install borgbackup using sudo apt"
      read
      sudo apt install borgbackup || { echo "Unable to install borg" >&2; exit 1; }
    else
      echo "Unable to install borg" >&2
      exit 1
    fi
  fi
}

pause-launchd() {
  if launchctl list | grep --quiet --fixed-strings "${LAUNCHD_LABEL}"; then
    launchctl remove "${LAUNCHD_LABEL}" || { echo "Unable to remove ${LAUNCHD_LABEL} (${?})" >&2; exit 1; }
  fi
}

install-launchd() {
  local LAUNCH_AGENTS_DIR="${HOME}/Library/LaunchAgents"

  mkdir -p "${LAUNCH_AGENTS_DIR}" || { echo "Unable to make directory ${LAUNCH_AGENTS_DIR} (${?})" >&2; exit 1; }

cat <<PLIST | sudo tee "${LAUNCH_AGENTS_DIR}/${LAUNCHD_LABEL}.plist" || { echo "Unable to save ${LAUNCH_AGENTS_DIR}/${LAUNCHD_LABEL}.plist (${?})" >&2; exit 1; }
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>${LAUNCHD_LABEL}</string>

  <key>ProgramArguments</key>
  <array>
    <string>sh</string>
    <string>-c</string>
    <string>/usr/local/bin/${CONFIG_FILENAME}</string>
  </array>

  <key>StartCalendarInterval</key>
  <dict>
    <key>Minute</key>
    <integer>0</integer>
  </dict>

  <key>UserName</key>
  <string>${USER}</string>

  <key>StandardOutPath</key>
  <string>/Users/${USER}/Library/${LAUNCHD_LABEL}.stdout.log</string>

  <key>StandardErrorPath</key>
  <string>/Users/${USER}/Library/${LAUNCHD_LABEL}.stderr.log</string>

</dict>
</plist>
PLIST

  launchctl load -w "${LAUNCH_AGENTS_DIR}/${LAUNCHD_LABEL}.plist" || { echo "Unable to load ${LAUNCHD_LABEL} (${?})" >&2; exit 1; }
}

uninstall-launchd() {
  pause-launchd
  local LAUNCH_AGENTS_DIR="${HOME}/Library/LaunchAgents"
  rm -f "${LAUNCH_AGENTS_DIR}/${LAUNCHD_LABEL}.plist" || { echo "Unable to remove ${LAUNCHD_LABEL}.plist (${?})" >&2; exit 1; }
}

pause-systemd() {
  if sudo systemctl is-enabled "${SYSTEMD_NAME}.timer" >/dev/null 2>&1; then
    sudo systemctl stop "${SYSTEMD_NAME}.timer" || { echo "Unable to stop timer (${?})" >&2; exit 1; }
  fi
}

install-systemd() {
  if [ ! -z "${REPO_VOLUME:-}" ]; then
    local CONDITION_REPO_VOLUME_PATH_IS_MOUNT_POINT="ConditionPathIsMountPoint=${REPO_VOLUME}"
  fi

  echo "### ${SYSTEMD_NAME}.service:"

cat <<INI | sudo tee "/etc/systemd/system/${SYSTEMD_NAME}.service" || { echo "Unable to save ${SYSTEMD_NAME}.service (${?})" >&2; exit 1; }
[Unit]
Description=Backup service for ${SYSTEMD_NAME}

Requires=local-fs.target remote-fs.target network.target nss-lookup.target time-sync.target
After=   local-fs.target remote-fs.target network.target nss-lookup.target time-sync.target

${CONDITION_REPO_VOLUME_PATH_IS_MOUNT_POINT}

[Service]
Type=oneshot

ExecStart=/usr/local/bin/${CONFIG_FILENAME}

User=${USER}
Group=${USER}

SyslogIdentifier=${SYSTEMD_NAME}

ProtectSystem=full
PrivateTmp=true
PrivateDevices=true
NoNewPrivileges=true
INI

  echo ""
  echo "### ${SYSTEMD_NAME}.timer:"

cat <<INI | sudo tee "/etc/systemd/system/${SYSTEMD_NAME}.timer" || { echo "Unable to save ${SYSTEMD_NAME}.timer (${?})" >&2; exit 1; }
[Unit]
Description=Backup service timer for ${SYSTEMD_NAME}

[Timer]
OnCalendar=hourly

[Install]
WantedBy=timers.target
INI

  echo ""

  sudo systemctl reenable "${SYSTEMD_NAME}.service" || { echo "Unable to reenable ${SYSTEMD_NAME}.service (${?})" >&2; exit 1; }
  sudo systemctl reenable "${SYSTEMD_NAME}.timer" || { echo "Unable to reenable ${SYSTEMD_NAME}.timer (${?})" >&2; exit 1; }

  sudo systemctl start "${SYSTEMD_NAME}.timer" || { echo "Unable to start ${SYSTEMD_NAME}.timer (${?})" >&2; exit 1; }
}

uninstall-systemd() {
  pause-systemd

  sudo systemctl disable "${SYSTEMD_NAME}.timer" || { echo "Unable to disable ${SYSTEMD_NAME}.timer (${?})" >&2; exit 1; }
  sudo systemctl disable "${SYSTEMD_NAME}.service" || { echo "Unable to disable ${SYSTEMD_NAME}.service (${?})" >&2; exit 1; }

  sudo rm  "/etc/systemd/system/${SYSTEMD_NAME}.timer" || { echo "Unable to remove ${SYSTEMD_NAME}.timer file (${?})" >&2; exit 1; }
  sudo rm "/etc/systemd/system/${SYSTEMD_NAME}.service" || { echo "Unable to remove ${SYSTEMD_NAME}.service file (${?})" >&2; exit 1; }
}

init() {
  prepare-borg-env
  ensure-repo-volume-connected

  if [ ! -d "${BORG_REPO}" ]; then
    echo "Running borg init"

    borg init --encryption keyfile-blake2 || { echo "Borg init failed (${?})" >&2; exit 1; }

    EXPORT_PATH="${KEY_EXPORT_DIR}/${REPO_NAME}-$(date +"%Y%m%dT%H%M%SZ")" || { echo "Unable to get current date" >&2; exit 1; }

    mkdir -p "${KEY_EXPORT_DIR}" || { echo "Unable to create directory ${KEY_EXPORT_DIR}" >&2; exit 1; }

    echo "Exporting keys to ${EXPORT_PATH}"

    borg key export "${BORG_REPO}" "${EXPORT_PATH}.key" || { echo "borg key export failed (${?})" >&2; exit 1; }
    borg key export --paper "${BORG_REPO}" "${EXPORT_PATH}.txt" || { echo "borg key export failed (${?})" >&2; exit 1; }
    borg key export --qr-html "${BORG_REPO}" "${EXPORT_PATH}.html" || { echo "borg key export failed (${?})" >&2; exit 1; }
  fi

  if [ ! -z "${RCLONE_REMOTE:-}" ]; then
    determine-rclone-config-arg

    if ! rclone listremotes ${RCLONE_CONFIG_ARG:-} | grep --quiet --fixed-strings --line-regexp "${RCLONE_REMOTE}:"; then
      rclone-config
    fi
  fi
}

determine-rclone-config-arg() {
  if [ ! -z "${RCLONE_CONFIG:-}" ]; then
    RCLONE_CONFIG_ARG="--config $(printf "%q" "${RCLONE_CONFIG}")" || { echo "printf of RCLONE_CONFIG failed (${?})" >&2; exit 1; }
  fi
}

rclone-config() {
  determine-rclone-config-arg

  echo "Running rclone config"

  rclone config ${RCLONE_CONFIG_ARG:-} || { echo "rclone config failed (${?})" >&2; exit 1; }
}

perform-backup-and-upload-offsite() {
  perform-backup

  if [ ! -z "${RCLONE_REMOTE:-}" ]; then
    upload-offsite
  fi

  echo "Backup and upload done in $((SECONDS / 3600))h$(((SECONDS % 3600) / 60))m$((SECONDS % 60))s"
}

perform-backup() {
  prepare-borg-env
  ensure-repo-volume-connected

  if [[ "$OSTYPE" == "darwin"* ]]; then
    export PATH="/usr/local/bin:${PATH}"
  fi

  if ! command -v borg >/dev/null;  then
    echo "Requires borgbackup to be installed" >&2
    exit 1
  fi

  if [ ! -d "${BORG_REPO}" ]; then
    echo "Requires borg repo directory to be present" >&2
    exit 1
  fi

  echo "Starting make-backup..."
  make-backup
  echo "Finished make-backup"
}

add-files() {
  if [ -t 1 ]; then
    local CREATE_VISUAL_ARGS="--stats --progress"
    local PRUNE_VISUAL_ARGS="--stats --list"
  fi

  (
    # The purpose of this cd is to use relative to ${FROM_PATH} paths in backup
    cd "${FROM_PATH}" || { echo "Unable to change directory to ${FROM_PATH} (${?})" >&2; exit 1; }

    echo "Adding files to backup: $@"

    borg create ${CREATE_VISUAL_ARGS:-} --compression zstd "::${CHECKPOINT:-}${PREFIX:-}{hostname}-{utcnow}" "$@" || { echo "borg create failed (${?})" >&2; exit 1; }

    borg prune ${PRUNE_VISUAL_ARGS:-} --keep-within 4d --keep-daily=7 --keep-weekly=4 --keep-monthly=24 --prefix "${PREFIX:-}{hostname}" || { echo "borg prune failed (${?})" >&2; exit 1; }
  )
}

upload-offsite() {
  prepare-borg-env
  ensure-repo-volume-connected

  if [[ "$OSTYPE" == "darwin"* ]]; then
    export PATH="/usr/local/bin:${PATH}"
  fi

  if ! command -v rclone >/dev/null;  then
    echo "Requires rclone to be installed" >&2
    exit 1
  fi

  if [ ! -d "${BORG_REPO}" ]; then
    echo "Requires borg repo to be present" >&2
    exit 1
  fi

  if [ -z "${RCLONE_STATE_DIR:-}" ]; then
    RCLONE_STATE_DIR="${HOME}/.cache/backup-rclone-state"
  fi

  if [ ! -d "${RCLONE_STATE_DIR}" ]; then
    mkdir -p "${RCLONE_STATE_DIR}" || { echo "Unable to create directory ${RCLONE_STATE_DIR}" >&2; exit 1; }
  fi

  if [ -t 1 ]; then
    local VISUAL_ARGS="--progress"
  fi

  local DATE_FLAG; DATE_FLAG="${RCLONE_STATE_DIR}/$(date +"%Y%m%d")-${BORG_REPO_HASH}" || { echo "Unable to get current date" >&2; exit 1; }
  local MONTH_FLAG; MONTH_FLAG="${RCLONE_STATE_DIR}/$(date +"%Y%m")-${BORG_REPO_HASH}" || { echo "Unable to get current date" >&2; exit 1; }

  determine-rclone-config-arg

  if [ ! -f "${DATE_FLAG}.rclone-sync" ]; then
    echo "Starting rclone sync"

    rclone sync "${BORG_REPO}" "${RCLONE_REMOTE}:${RCLONE_PATH}/${REPO_NAME}" ${RCLONE_CONFIG_ARG:-} ${VISUAL_ARGS:-} ${RCLONE_EXTRA_ARGS:-} || { echo "rclone sync failed (${?})" >&2; exit 1; }

    touch "${DATE_FLAG}.rclone-sync" || { echo "Unable to set backup state in ${RCLONE_STATE_DIR}" >&2; exit 1; }

    echo "rclone sync done"
  fi

  if [ ! -f "${MONTH_FLAG}.rclone-check" ]; then
    echo "Starting rclone check"

    rclone check "${BORG_REPO}" "${RCLONE_REMOTE}:${RCLONE_PATH}/${REPO_NAME}" ${RCLONE_CONFIG_ARG:-} ${VISUAL_ARGS:-} ${RCLONE_EXTRA_ARGS:-} || { echo "rclone check failed (${?})" >&2; exit 1; }

    touch "${MONTH_FLAG}.rclone-check" || { echo "Unable to set backup state in ${RCLONE_STATE_DIR}" >&2; exit 1; }

    echo "rclone check done"
  fi
}

start() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    prepare-systemd-env
    sudo systemctl --no-block start "${SYSTEMD_NAME}.service" || { echo "Unable to start (${?})" >&2; exit 1; }

  elif [[ "$OSTYPE" == "darwin"* ]]; then
    prepare-launchd-env
    launchctl start "${LAUNCHD_LABEL}" || { echo "Unable to start ${LAUNCHD_LABEL} (${?})" >&2; exit 1; }
  fi
}

status() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    prepare-systemd-env

    systemctl status "${SYSTEMD_NAME}.service"
    systemctl status "${SYSTEMD_NAME}.timer"
    systemctl list-timers "${SYSTEMD_NAME}.timer" --all
  fi
}

log() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    prepare-systemd-env

    journalctl -u "${SYSTEMD_NAME}.service" --since today
  fi
}

shell() {
  prepare-borg-env
  ensure-repo-volume-connected
  "${SHELL}"
}

use() {
  determine-config-path "${1}"

  . "${CONFIG_ABSOLUTE_DIR_PATH}/${CONFIG_FILENAME}"

  BACKUP_SCRIPT_CONFIG_LOADED=true

  shift

  "${1:-perform-backup-and-upload-offsite}" "${@:2}"
}

"${1:-perform-backup-and-upload-offsite}" "${@:2}"
